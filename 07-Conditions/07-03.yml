AWSTemplateFormatVersion: 2010-09-09
Description: Condition Practice

Parameters:
  MyKeyName:
    Description: Select a Key
    Type: AWS::EC2::KeyPair::MyKeyName
  EnvironmentName:
    Description: Select the environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: must be development or production

Mappings:
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small

Conditions:
  CreateEIPForProd: !Equals [!Ref EvironmentName, prod]
  CreateDevSecurityGroup: !Equals [!Ref EnvironmentName, dev]
  CreateProdSecurityGroup: !Equals [!Ref EnvironmentName, prod]

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref AWS::Region
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref MyEnvironmentMap
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups:
        !If [
          CreateDevSecurityGroup,
          [!Ref DevEnvSecurityGroup],
          [!Ref ProdEnvSecurityGroup],
        ]
  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties:
      InstanceId: !Ref MyVMInstance
  DevEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: DevSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'

  ProdEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateProdSecurityGroup
    Properties:
      GroupDescription: ProdSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
